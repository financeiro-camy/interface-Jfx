package DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.sql.Date;

public class RelatorioPCDAO {
    
    private ProjetoCofrinhoDAO projetoCofrinhoDAO = new ProjetoCofrinhoDAO();

    public RelatorioPC create(RelatorioPC relatorioPC) throws SQLException {
        String sql = "INSERT INTO RelatorioPC (id_cofrinho, id_conta, valor, data_insercao) VALUES (?,?,?,?)";
    
        try (
            Connection connection = Conexao.getConnection();
            PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
        ) {
            statement.setInt(1, relatorioPC.getId_cofrinho());
            statement.setInt(2, relatorioPC.getId_conta());
            statement.setDouble(3, relatorioPC.getValor());
            statement.setDate(4, Date.valueOf(relatorioPC.getData_insercao()));
    
            int affectedRows = statement.executeUpdate();
    
            if (affectedRows == 0) {
                throw new SQLException("A inserção falhou, nenhum registro foi criado.");
            }
    
            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    int autoGeneratedId = generatedKeys.getInt(1);
                    relatorioPC.setId(autoGeneratedId);
                } else {
                    throw new SQLException("Falha ao obter a chave primária gerada automaticamente.");
                }
            }
    
            double valorAtingido = projetoCofrinhoDAO.calcularValorAtingido(relatorioPC.getId_cofrinho());
            double metaQuantia = projetoCofrinhoDAO.findMetaQuantiaById(relatorioPC.getId_cofrinho());
    
            if (valorAtingido >= metaQuantia) {
                ProjetoCofrinho projeto = projetoCofrinhoDAO.findById(relatorioPC.getId_cofrinho());
                projeto.setAtivo(false); 
                projetoCofrinhoDAO.update(projeto); 
            }
    
            return relatorioPC;
        }
    }
           
        public RelatorioPC update(RelatorioPC relatorioPC) throws SQLException {
            String sql = "UPDATE RelatorioPC SET id_cofrinho=?, id_conta=?, valor=?, data_insercao=? WHERE id=?;";
    
            try (
                Connection connection = Conexao.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
            ) {
                statement.setInt(1, relatorioPC.getId_cofrinho());
                statement.setInt(2, relatorioPC.getId_conta());
                statement.setDouble(3, relatorioPC.getValor());
                statement.setDate(4, Date.valueOf(relatorioPC.getData_insercao()));
                statement.setInt(5, relatorioPC.getId());
    
                statement.executeUpdate();
    
                return relatorioPC;
            }
        }

        public void delete(Integer id) {
            String sql = "DELETE FROM RelatorioPC WHERE id = ?;";
    
            try (
                Connection connection = Conexao.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
            ) {
                statement.setInt(1, id);
                statement.executeUpdate();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    
        public void delete(RelatorioPC relatorioPC) {
            delete(relatorioPC.getId());
        }
    
        public RelatorioPC findById(Integer id) {
            String sql = "SELECT * FROM RelatorioPC WHERE id = ?;";
    
            try (
                Connection connection = Conexao.getConnection();
                PreparedStatement statement = connection.prepareStatement(sql);
            ) {
                statement.setInt(1, id);
    
                ResultSet rs = statement.executeQuery();
    
                if (rs.next()) {
                    return resultSetToRelatorioPC(rs);
                }
    
                rs.close();
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
    
            return null;
        }

        public List<RelatorioPC> findAll() {
            String sql = "SELECT * FROM RelatorioPC;";
            List<RelatorioPC> relatorios = new ArrayList<>();
    
            try (
                Connection connection = Conexao.getConnection();
                Statement statement = connection.createStatement();
                ResultSet rs = statement.executeQuery(sql);
            ) {
                while (rs.next()) {
                    relatorios.add(resultSetToRelatorioPC(rs));
                }
    
                return relatorios;
            } catch (Exception e) {
                e.printStackTrace();
                return null;
            }
        }

        public RelatorioPC createAlternative(RelatorioPC relatorioPC, double metaQuantia, double valorArrecadado) throws SQLException {
        String sql = "INSERT INTO RelatorioPC (id_cofrinho, id_conta, valor, data_insercao) VALUES (?,?,?,?)";
    
        try (
            Connection connection = Conexao.getConnection();
            PreparedStatement statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
        ) {
            statement.setInt(1, relatorioPC.getId_cofrinho());
            statement.setInt(2, relatorioPC.getId_conta());
            statement.setDouble(3, relatorioPC.getValor());
            statement.setDate(4, Date.valueOf(relatorioPC.getData_insercao()));
    
            int affectedRows = statement.executeUpdate();
    
            if (affectedRows == 0) {
                throw new SQLException("A inserção falhou, nenhum registro foi criado.");
            }
    
            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    int autoGeneratedId = generatedKeys.getInt(1);
                    relatorioPC.setId(autoGeneratedId);
                } else {
                    throw new SQLException("Falha ao obter a chave primária gerada automaticamente.");
                }
            }
             
            valorArrecadado = projetoCofrinhoDAO.calcularValorAtingido(relatorioPC.getId_cofrinho());
            
            if (valorArrecadado >= metaQuantia) {
                ProjetoCofrinho projeto = projetoCofrinhoDAO.findById(relatorioPC.getId_cofrinho());
                projeto.setAtivo(false); 
                projetoCofrinhoDAO.update(projeto); 
            }
    
            return relatorioPC;
        }
    }

    private RelatorioPC resultSetToRelatorioPC(ResultSet rs) throws SQLException {
        return new RelatorioPC(
            rs.getInt("id"),
            rs.getInt("id_cofrinho"),
            rs.getInt("id_conta"),
            rs.getDouble("valor"),
            rs.getDate("data_insercao").toLocalDate()
        );
    }
}